/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../..";
import { Rivet } from "@rivet-gg/api";
import * as core from "../../../../../../core";

export const NamespaceAnalyticsDataSet: core.serialization.ObjectSchema<
    serializers.cloud.NamespaceAnalyticsDataSet.Raw,
    Rivet.cloud.NamespaceAnalyticsDataSet
> = core.serialization.object({
    matchmakerOverview: core.serialization.property(
        "matchmaker_overview",
        core.serialization
            .lazyObject(async () => (await import("../../../../..")).cloud.MatchmakerOverviewDataSet)
            .optional()
    ),
    playerCount: core.serialization.property(
        "player_count",
        core.serialization.lazyObject(async () => (await import("../../../../..")).cloud.PlayerCountDataSet).optional()
    ),
    playerCountByRegion: core.serialization.property(
        "player_count_by_region",
        core.serialization
            .lazyObject(async () => (await import("../../../../..")).cloud.PlayerCountByRegionDataSet)
            .optional()
    ),
    playerCountByGameMode: core.serialization.property(
        "player_count_by_game_mode",
        core.serialization
            .lazyObject(async () => (await import("../../../../..")).cloud.PlayerCountByGameModeDataSet)
            .optional()
    ),
    lobbyCount: core.serialization.property(
        "lobby_count",
        core.serialization.lazyObject(async () => (await import("../../../../..")).cloud.LobbyCountDataSet).optional()
    ),
    lobbyCountByRegion: core.serialization.property(
        "lobby_count_by_region",
        core.serialization
            .lazyObject(async () => (await import("../../../../..")).cloud.LobbyCountByRegionDataSet)
            .optional()
    ),
    lobbyCountByGameMode: core.serialization.property(
        "lobby_count_by_game_mode",
        core.serialization
            .lazyObject(async () => (await import("../../../../..")).cloud.LobbyCountByGameModeDataSet)
            .optional()
    ),
    avgPlayDuration: core.serialization.property(
        "avg_play_duration",
        core.serialization
            .lazyObject(async () => (await import("../../../../..")).cloud.AvgPlayDurationDataSet)
            .optional()
    ),
    avgPlayDurationByRegion: core.serialization.property(
        "avg_play_duration_by_region",
        core.serialization
            .lazyObject(async () => (await import("../../../../..")).cloud.AvgPlayDurationByRegionDataSet)
            .optional()
    ),
    avgPlayDurationByGameMode: core.serialization.property(
        "avg_play_duration_by_game_mode",
        core.serialization
            .lazyObject(async () => (await import("../../../../..")).cloud.AvgPlayDurationByGameModeDataSet)
            .optional()
    ),
    newPlayersPerSecond: core.serialization.property(
        "new_players_per_second",
        core.serialization
            .lazyObject(async () => (await import("../../../../..")).cloud.NewPlayersPerSecondDataSet)
            .optional()
    ),
    newLobbiesPerSecond: core.serialization.property(
        "new_lobbies_per_second",
        core.serialization
            .lazyObject(async () => (await import("../../../../..")).cloud.NewLobbiesPerSecondDataSet)
            .optional()
    ),
    destroyedLobbiesByFailure: core.serialization.property(
        "destroyed_lobbies_by_failure",
        core.serialization
            .lazyObject(async () => (await import("../../../../..")).cloud.DestroyedLobbiesByFailureDataSet)
            .optional()
    ),
    destroyedLobbiesByExitCode: core.serialization.property(
        "destroyed_lobbies_by_exit_code",
        core.serialization
            .lazyObject(async () => (await import("../../../../..")).cloud.DestroyedLobbiesByExitCodeDataSet)
            .optional()
    ),
    failedLobbies: core.serialization.property(
        "failed_lobbies",
        core.serialization
            .lazyObject(async () => (await import("../../../../..")).cloud.FailedLobbiesDataSet)
            .optional()
    ),
    lobbyReadyTime: core.serialization.property(
        "lobby_ready_time",
        core.serialization
            .lazyObject(async () => (await import("../../../../..")).cloud.LobbyReadyTimeDataSet)
            .optional()
    ),
    identityAccounts: core.serialization.property(
        "identity_accounts",
        core.serialization
            .lazyObject(async () => (await import("../../../../..")).cloud.IdentityAccountsDataSet)
            .optional()
    ),
});

export declare namespace NamespaceAnalyticsDataSet {
    interface Raw {
        matchmaker_overview?: serializers.cloud.MatchmakerOverviewDataSet.Raw | null;
        player_count?: serializers.cloud.PlayerCountDataSet.Raw | null;
        player_count_by_region?: serializers.cloud.PlayerCountByRegionDataSet.Raw | null;
        player_count_by_game_mode?: serializers.cloud.PlayerCountByGameModeDataSet.Raw | null;
        lobby_count?: serializers.cloud.LobbyCountDataSet.Raw | null;
        lobby_count_by_region?: serializers.cloud.LobbyCountByRegionDataSet.Raw | null;
        lobby_count_by_game_mode?: serializers.cloud.LobbyCountByGameModeDataSet.Raw | null;
        avg_play_duration?: serializers.cloud.AvgPlayDurationDataSet.Raw | null;
        avg_play_duration_by_region?: serializers.cloud.AvgPlayDurationByRegionDataSet.Raw | null;
        avg_play_duration_by_game_mode?: serializers.cloud.AvgPlayDurationByGameModeDataSet.Raw | null;
        new_players_per_second?: serializers.cloud.NewPlayersPerSecondDataSet.Raw | null;
        new_lobbies_per_second?: serializers.cloud.NewLobbiesPerSecondDataSet.Raw | null;
        destroyed_lobbies_by_failure?: serializers.cloud.DestroyedLobbiesByFailureDataSet.Raw | null;
        destroyed_lobbies_by_exit_code?: serializers.cloud.DestroyedLobbiesByExitCodeDataSet.Raw | null;
        failed_lobbies?: serializers.cloud.FailedLobbiesDataSet.Raw | null;
        lobby_ready_time?: serializers.cloud.LobbyReadyTimeDataSet.Raw | null;
        identity_accounts?: serializers.cloud.IdentityAccountsDataSet.Raw | null;
    }
}
