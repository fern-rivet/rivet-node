/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import { Rivet } from "@rivet-gg/api";
import urlJoin from "url-join";
import * as serializers from "../../../../../../serialization";
import * as errors from "../../../../../../errors";

export declare namespace Client {
    interface Options {
        environment?: environments.RivetEnvironment | environments.RivetEnvironmentUrls;
        token?: core.Supplier<core.BearerToken>;
    }
}

export class Client {
    constructor(private readonly options: Client.Options) {}

    /**
     * Begins the process for linking an identity with the Rivet Hub.
     * # Importance of Linking Identities
     * When an identity is created via `rivet.api.identity#SetupIdentity`, the identity is temporary
     * and is not shared with other games the user plays.
     * In order to make the identity permanent and synchronize the identity with
     * other games, the identity must be linked with the hub.
     * # Linking Process
     * The linking process works by opening `identity_link_url` in a browser then polling
     * `rivet.api.identity#GetGameLink` to wait for it to complete.
     * This is designed to be as flexible as possible so `identity_link_url` can be opened
     * on any device. For example, when playing a console game, the user can scan a
     * QR code for `identity_link_url` to authenticate on their phone.
     *
     */
    public async prepare(): Promise<Rivet.identity.PrepareGameLinkOutput> {
        const _response = await core.fetcher({
            url: urlJoin(
                (this.options.environment ?? environments.RivetEnvironment.Production).Identity,
                "/game-links"
            ),
            method: "POST",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
        });
        if (_response.ok) {
            return await serializers.identity.PrepareGameLinkOutput.parseOrThrow(
                _response.body as serializers.identity.PrepareGameLinkOutput.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.RivetError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.RivetError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.RivetTimeoutError();
            case "unknown":
                throw new errors.RivetError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Returns the current status of a linking process. Once `status` is `complete`, the identity's profile should be fetched again since they may have switched accounts.
     */
    public async get(request: Rivet.identity.GetGameLinkInput): Promise<Rivet.identity.GetGameLinkOutput> {
        const { identityLinkToken, watchIndex } = request;
        const _queryParams = new URLSearchParams();
        _queryParams.append("identity_link_token", identityLinkToken);
        if (watchIndex != null) {
            _queryParams.append("watch_index", watchIndex);
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (this.options.environment ?? environments.RivetEnvironment.Production).Identity,
                "/game-links"
            ),
            method: "GET",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.identity.GetGameLinkOutput.parseOrThrow(
                _response.body as serializers.identity.GetGameLinkOutput.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.RivetError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.RivetError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.RivetTimeoutError();
            case "unknown":
                throw new errors.RivetError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
