/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import { Client as AvatarsClient } from "../resources/avatars/client/Client";
import { Client as BuildsClient } from "../resources/builds/client/Client";
import { Client as CdnClient } from "../resources/cdn/client/Client";
import { Client as GamesClient } from "../resources/games/client/Client";
import { Client as MatchmakerClient } from "../resources/matchmaker/client/Client";
import { Client as NamespacesClient } from "../resources/namespaces/client/Client";
import { Client as TokensClient } from "../resources/tokens/client/Client";
import { Client as VersionsClient } from "../resources/versions/client/Client";

export declare namespace Client {
    interface Options {
        environment?: environments.RivetEnvironment | environments.RivetEnvironmentUrls;
        token?: core.Supplier<core.BearerToken>;
    }
}

export class Client {
    constructor(private readonly options: Client.Options) {}

    private _avatars: AvatarsClient | undefined;

    public get avatars(): AvatarsClient {
        return (this._avatars ??= new AvatarsClient(this.options));
    }

    private _builds: BuildsClient | undefined;

    public get builds(): BuildsClient {
        return (this._builds ??= new BuildsClient(this.options));
    }

    private _cdn: CdnClient | undefined;

    public get cdn(): CdnClient {
        return (this._cdn ??= new CdnClient(this.options));
    }

    private _games: GamesClient | undefined;

    public get games(): GamesClient {
        return (this._games ??= new GamesClient(this.options));
    }

    private _matchmaker: MatchmakerClient | undefined;

    public get matchmaker(): MatchmakerClient {
        return (this._matchmaker ??= new MatchmakerClient(this.options));
    }

    private _namespaces: NamespacesClient | undefined;

    public get namespaces(): NamespacesClient {
        return (this._namespaces ??= new NamespacesClient(this.options));
    }

    private _tokens: TokensClient | undefined;

    public get tokens(): TokensClient {
        return (this._tokens ??= new TokensClient(this.options));
    }

    private _versions: VersionsClient | undefined;

    public get versions(): VersionsClient {
        return (this._versions ??= new VersionsClient(this.options));
    }
}
