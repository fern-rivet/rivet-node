/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../../../environments";
import * as core from "../../../../../../../../core";
import { Rivet } from "@rivet-gg/api";
import urlJoin from "url-join";
import * as serializers from "../../../../../../../../serialization";
import * as errors from "../../../../../../../../errors";
import { Client as AnalyticsClient } from "../resources/analytics/client/Client";
import { Client as LogsClient } from "../resources/logs/client/Client";

export declare namespace Client {
    interface Options {
        environment?: environments.RivetEnvironment | environments.RivetEnvironmentUrls;
        token?: core.Supplier<core.BearerToken>;
    }
}

export class Client {
    constructor(private readonly options: Client.Options) {}

    /**
     * Creates a new namespace for the given game.
     */
    public async createGameNamespace(
        gameId: string,
        request: Rivet.cloud.games.namespaces.CreateGameNamespaceInput
    ): Promise<Rivet.cloud.games.namespaces.CreateGameNamespaceOutput> {
        const _response = await core.fetcher({
            url: urlJoin(
                (this.options.environment ?? environments.RivetEnvironment.Production).cloud,
                `games/${gameId}/namespaces`
            ),
            method: "POST",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
            body: await serializers.cloud.games.namespaces.CreateGameNamespaceInput.jsonOrThrow(request),
        });
        if (_response.ok) {
            return await serializers.cloud.games.namespaces.CreateGameNamespaceOutput.parseOrThrow(
                _response.body as serializers.cloud.games.namespaces.CreateGameNamespaceOutput.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.RivetError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.RivetError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.RivetTimeoutError();
            case "unknown":
                throw new errors.RivetError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Validates information used to create a new game namespace.
     */
    public async validateGameNamespace(
        gameId: string,
        request: Rivet.cloud.games.namespaces.ValidateGameNamespaceInput
    ): Promise<Rivet.cloud.games.namespaces.ValidateGameNamespaceOutput> {
        const _response = await core.fetcher({
            url: urlJoin(
                (this.options.environment ?? environments.RivetEnvironment.Production).cloud,
                `games/${gameId}/namespaces/validate`
            ),
            method: "POST",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
            body: await serializers.cloud.games.namespaces.ValidateGameNamespaceInput.jsonOrThrow(request),
        });
        if (_response.ok) {
            return await serializers.cloud.games.namespaces.ValidateGameNamespaceOutput.parseOrThrow(
                _response.body as serializers.cloud.games.namespaces.ValidateGameNamespaceOutput.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.RivetError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.RivetError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.RivetTimeoutError();
            case "unknown":
                throw new errors.RivetError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Gets a game namespace by namespace ID.
     */
    public async getGameNamespaceById(
        gameId: string,
        namespaceId: string
    ): Promise<Rivet.cloud.games.namespaces.GetGameNamespaceByIdOutput> {
        const _response = await core.fetcher({
            url: urlJoin(
                (this.options.environment ?? environments.RivetEnvironment.Production).cloud,
                `games/${gameId}/namespaces/${namespaceId}`
            ),
            method: "GET",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
        });
        if (_response.ok) {
            return await serializers.cloud.games.namespaces.GetGameNamespaceByIdOutput.parseOrThrow(
                _response.body as serializers.cloud.games.namespaces.GetGameNamespaceByIdOutput.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.RivetError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.RivetError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.RivetTimeoutError();
            case "unknown":
                throw new errors.RivetError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Adds an authenticated user to the given game namespace.
     */
    public async updateNamespaceCdnAuthUser(
        gameId: string,
        namespaceId: string,
        request: Rivet.cloud.games.namespaces.UpdateNamespaceCdnAuthUserInput
    ): Promise<void> {
        const _response = await core.fetcher({
            url: urlJoin(
                (this.options.environment ?? environments.RivetEnvironment.Production).cloud,
                `games/${gameId}/namespaces/${namespaceId}/auth-user`
            ),
            method: "POST",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
            body: await serializers.cloud.games.namespaces.UpdateNamespaceCdnAuthUserInput.jsonOrThrow(request),
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.RivetError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.RivetError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.RivetTimeoutError();
            case "unknown":
                throw new errors.RivetError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Removes an authenticated user from the given game namespace.
     */
    public async removeNamespaceCdnAuthUser(gameId: string, namespaceId: string, user: string): Promise<void> {
        const _response = await core.fetcher({
            url: urlJoin(
                (this.options.environment ?? environments.RivetEnvironment.Production).cloud,
                `games/${gameId}/namespaces/${namespaceId}/auth-user/${user}`
            ),
            method: "DELETE",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.RivetError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.RivetError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.RivetTimeoutError();
            case "unknown":
                throw new errors.RivetError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Updates the CDN authentication type of the given game namesapce.
     */
    public async setNamespaceCdnAuthType(
        gameId: string,
        namespaceId: string,
        request: Rivet.cloud.games.namespaces.SetNamespaceCdnAuthTypeInput
    ): Promise<void> {
        const _response = await core.fetcher({
            url: urlJoin(
                (this.options.environment ?? environments.RivetEnvironment.Production).cloud,
                `games/${gameId}/namespaces/${namespaceId}/cdn-auth`
            ),
            method: "PUT",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
            body: await serializers.cloud.games.namespaces.SetNamespaceCdnAuthTypeInput.jsonOrThrow(request),
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.RivetError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.RivetError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.RivetTimeoutError();
            case "unknown":
                throw new errors.RivetError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Toggles whether or not to allow authentication based on domain for the given game namesapce.
     */
    public async toggleNamespaceDomainPublicAuth(
        gameId: string,
        namespaceId: string,
        request: Rivet.cloud.games.namespaces.ToggleNamespaceDomainPublicAuthInput
    ): Promise<void> {
        const _response = await core.fetcher({
            url: urlJoin(
                (this.options.environment ?? environments.RivetEnvironment.Production).cloud,
                `games/${gameId}/namespaces/${namespaceId}/domain-public-auth`
            ),
            method: "PUT",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
            body: await serializers.cloud.games.namespaces.ToggleNamespaceDomainPublicAuthInput.jsonOrThrow(request),
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.RivetError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.RivetError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.RivetTimeoutError();
            case "unknown":
                throw new errors.RivetError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Adds a domain to the given game namespace.
     */
    public async addNamespaceDomain(
        gameId: string,
        namespaceId: string,
        request: Rivet.cloud.games.namespaces.AddNamespaceDomainInput
    ): Promise<void> {
        const _response = await core.fetcher({
            url: urlJoin(
                (this.options.environment ?? environments.RivetEnvironment.Production).cloud,
                `games/${gameId}/namespaces/${namespaceId}/domains`
            ),
            method: "POST",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
            body: await serializers.cloud.games.namespaces.AddNamespaceDomainInput.jsonOrThrow(request),
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.RivetError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.RivetError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.RivetTimeoutError();
            case "unknown":
                throw new errors.RivetError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Removes a domain from the given game namespace.
     */
    public async removeNamespaceDomain(gameId: string, namespaceId: string, domain: string): Promise<void> {
        const _response = await core.fetcher({
            url: urlJoin(
                (this.options.environment ?? environments.RivetEnvironment.Production).cloud,
                `games/${gameId}/namespaces/${namespaceId}/domains/${domain}`
            ),
            method: "DELETE",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.RivetError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.RivetError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.RivetTimeoutError();
            case "unknown":
                throw new errors.RivetError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Updates matchmaker config for the given game namespace.
     */
    public async updateGameNamespaceMatchmakerConfig(
        gameId: string,
        namespaceId: string,
        request: Rivet.cloud.games.namespaces.UpdateGameNamespaceMatchmakerConfigInput
    ): Promise<void> {
        const _response = await core.fetcher({
            url: urlJoin(
                (this.options.environment ?? environments.RivetEnvironment.Production).cloud,
                `games/${gameId}/namespaces/${namespaceId}/mm-config`
            ),
            method: "POST",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
            body: await serializers.cloud.games.namespaces.UpdateGameNamespaceMatchmakerConfigInput.jsonOrThrow(
                request
            ),
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.RivetError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.RivetError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.RivetTimeoutError();
            case "unknown":
                throw new errors.RivetError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Validates information used to update a game namespace's matchmaker config.
     */
    public async validateGameNamespaceMatchmakerConfig(
        gameId: string,
        namespaceId: string,
        request: Rivet.cloud.games.namespaces.ValidateGameNamespaceMatchmakerConfigInput
    ): Promise<Rivet.cloud.games.namespaces.ValidateGameNamespaceMatchmakerConfigOutput> {
        const _response = await core.fetcher({
            url: urlJoin(
                (this.options.environment ?? environments.RivetEnvironment.Production).cloud,
                `games/${gameId}/namespaces/${namespaceId}/mm-config/validate`
            ),
            method: "POST",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
            body: await serializers.cloud.games.namespaces.ValidateGameNamespaceMatchmakerConfigInput.jsonOrThrow(
                request
            ),
        });
        if (_response.ok) {
            return await serializers.cloud.games.namespaces.ValidateGameNamespaceMatchmakerConfigOutput.parseOrThrow(
                _response.body as serializers.cloud.games.namespaces.ValidateGameNamespaceMatchmakerConfigOutput.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.RivetError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.RivetError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.RivetTimeoutError();
            case "unknown":
                throw new errors.RivetError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Creates a development token for the given namespace.
     */
    public async createGameNamespaceTokenDevelopment(
        gameId: string,
        namespaceId: string,
        request: Rivet.cloud.games.namespaces.CreateGameNamespaceTokenDevelopmentInput
    ): Promise<Rivet.cloud.games.namespaces.CreateGameNamespaceTokenDevelopmentOutput> {
        const _response = await core.fetcher({
            url: urlJoin(
                (this.options.environment ?? environments.RivetEnvironment.Production).cloud,
                `games/${gameId}/namespaces/${namespaceId}/tokens/development`
            ),
            method: "POST",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
            body: await serializers.cloud.games.namespaces.CreateGameNamespaceTokenDevelopmentInput.jsonOrThrow(
                request
            ),
        });
        if (_response.ok) {
            return await serializers.cloud.games.namespaces.CreateGameNamespaceTokenDevelopmentOutput.parseOrThrow(
                _response.body as serializers.cloud.games.namespaces.CreateGameNamespaceTokenDevelopmentOutput.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.RivetError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.RivetError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.RivetTimeoutError();
            case "unknown":
                throw new errors.RivetError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Validates information used to create a new game namespace development token.
     */
    public async validateGameNamespaceTokenDevelopment(
        gameId: string,
        namespaceId: string,
        request: Rivet.cloud.games.namespaces.ValidateGameNamespaceTokenDevelopmentInput
    ): Promise<Rivet.cloud.games.namespaces.ValidateGameNamespaceTokenDevelopmentOutput> {
        const _response = await core.fetcher({
            url: urlJoin(
                (this.options.environment ?? environments.RivetEnvironment.Production).cloud,
                `games/${gameId}/namespaces/${namespaceId}/tokens/development/validate`
            ),
            method: "POST",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
            body: await serializers.cloud.games.namespaces.ValidateGameNamespaceTokenDevelopmentInput.jsonOrThrow(
                request
            ),
        });
        if (_response.ok) {
            return await serializers.cloud.games.namespaces.ValidateGameNamespaceTokenDevelopmentOutput.parseOrThrow(
                _response.body as serializers.cloud.games.namespaces.ValidateGameNamespaceTokenDevelopmentOutput.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.RivetError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.RivetError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.RivetTimeoutError();
            case "unknown":
                throw new errors.RivetError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Creates a public token for the given namespace.
     */
    public async createGameNamespaceTokenPublic(
        gameId: string,
        namespaceId: string
    ): Promise<Rivet.cloud.games.namespaces.CreateGameNamespaceTokenPublicOutput> {
        const _response = await core.fetcher({
            url: urlJoin(
                (this.options.environment ?? environments.RivetEnvironment.Production).cloud,
                `games/${gameId}/namespaces/${namespaceId}/tokens/public`
            ),
            method: "POST",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
        });
        if (_response.ok) {
            return await serializers.cloud.games.namespaces.CreateGameNamespaceTokenPublicOutput.parseOrThrow(
                _response.body as serializers.cloud.games.namespaces.CreateGameNamespaceTokenPublicOutput.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.RivetError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.RivetError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.RivetTimeoutError();
            case "unknown":
                throw new errors.RivetError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Updates the version of a game namespace.
     */
    public async updateGameNamespaceVersion(
        gameId: string,
        namespaceId: string,
        request: Rivet.cloud.games.namespaces.UpdateGameNamespaceVersionInput
    ): Promise<void> {
        const _response = await core.fetcher({
            url: urlJoin(
                (this.options.environment ?? environments.RivetEnvironment.Production).cloud,
                `games/${gameId}/namespaces/${namespaceId}/version`
            ),
            method: "PUT",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
            body: await serializers.cloud.games.namespaces.UpdateGameNamespaceVersionInput.jsonOrThrow(request),
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.RivetError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.RivetError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.RivetTimeoutError();
            case "unknown":
                throw new errors.RivetError({
                    message: _response.error.errorMessage,
                });
        }
    }

    private _analytics: AnalyticsClient | undefined;

    public get analytics(): AnalyticsClient {
        return (this._analytics ??= new AnalyticsClient(this.options));
    }

    private _logs: LogsClient | undefined;

    public get logs(): LogsClient {
        return (this._logs ??= new LogsClient(this.options));
    }
}
